{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\isabe\\\\Documents\\\\ESIEE\\\\E5\\\\Application_Full_Stack_Data\\\\Projet_Schedule\\\\frontend\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\n// sert de composant parent pour les autres composants \n// utilisant Chakra UI.\n// fournit un thème à tous les composants enfants \n// ( Header dans ce cas) via l' API Context de React.\n\nimport Header from \"./components/Header\";\nimport NavBar from \"./components/NavBar\";\nimport TodosTable from \"./components/TodosTable\";\nimport AddTodo from \"./components/AddTodo\";\nimport { TodoProvider } from './ToDoContext';\nimport updateTodo from \"./components/UpdateTodo\";\nimport { UUpdateTodoContextProvider } from \"./UpdateTodoContext\";\n// Import le Todos composant\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(TodoProvider, {\n          children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-11 col-xm-12 mr-auto ml-auto mt-4 mb-4\",\n              children: /*#__PURE__*/_jsxDEV(UpdateContextTodoProvider, {\n                children: [/*#__PURE__*/_jsxDEV(Route, {\n                  exact: true,\n                  path: \"/\",\n                  component: TodosTable\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 28,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  exact: true,\n                  path: \"/addTodo\",\n                  component: AddTodo\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 29,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  exact: true,\n                  path: \"/updateTodo\",\n                  component: updateTodo\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 30,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n\n// version précéedente\n\n// import { useEffect, useState } from \"react\";\n// import { \n//     ChakraProvider, \n//     //Container, \n//     Heading, \n//     Center, \n//     VStack,\n//     Text,\n//     HStack,\n//     Button,\n//     SimpleGrid,\n// } from \"@chakra-ui/react\";\n\n// version précéedente\n\n// export default function App() {\n//     const [allTodos, setAllTodos] = useState([])\n\n//     // version test\n//     const fetchTodos = async () => {\n//         // pour récupérer les tâches du backend de manière asynchrone\n//         const response = await fetch(\"http://localhost:5000\")\n//         // mettre à jour la todo variable d'état à la fin de la fonction\n//         const todos = await response.json()\n//         setAllTodos(todos)\n//     }\n//     useEffect(() => {\n//         // récupère les todos à l'aide de la fetchTodos fonction\n//         fetchTodos()\n//     }, [])\n\n// version 3\n/*\r\n// is going to make the call\r\nuseEffect(() => {\r\n    fetch(\"http://localhost:5000/todos\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            console.log(data);\r\n            setAllTodos([data]);\r\n        });\r\n}, [])\r\n*/\n\n// center : background in black\n// frontcolor of white\n// VStack : vertical stack\n// Button\n// lg = large\n\n//   return (\n//     <ChakraProvider>\n//         <Center bg=\"black\" color=\"white\" padding={8}>\n//             <VStack spacing={7}>\n//                 <Heading> Your ToDo List</Heading>\n//                 <HStack>\n//                     <Text>Take a look at all the things you need to do!</Text>\n//                     <Button size=\"lg\" colorScheme=\"red\" isDisabled={null} onClick={null}>\n//                         Add ToDo\n//                     </Button> \n//                 </HStack>\n//                 <Heading> What you need to do</Heading>\n//                 <SimpleGrid columns={1} spacing={8}>\n//                     {\n//                         allTodos.map(todo =>{\n//                             return (\n//                                 <b> {todo.title} {todo.unit}</b>\n//                             )\n//                         })\n//                     }\n//                 </SimpleGrid>\n//             </VStack>\n//         </Center>\n//     </ChakraProvider>\n//   );\n// }\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Link","Route","Switch","Header","NavBar","TodosTable","AddTodo","TodoProvider","updateTodo","UUpdateTodoContextProvider","App"],"sources":["C:/Users/isabe/Documents/ESIEE/E5/Application_Full_Stack_Data/Projet_Schedule/frontend/src/App.js"],"sourcesContent":["import React from \"react\";\r\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\" \r\n  // sert de composant parent pour les autres composants \r\n  // utilisant Chakra UI.\r\n  // fournit un thème à tous les composants enfants \r\n  // ( Header dans ce cas) via l' API Context de React.\r\n\r\nimport Header from \"./components/Header\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport TodosTable from \"./components/TodosTable\"\r\nimport AddTodo from \"./components/AddTodo\"\r\n\r\nimport {TodoProvider} from './ToDoContext'\r\nimport updateTodo from \"./components/UpdateTodo\";\r\nimport { UUpdateTodoContextProvider } from \"./UpdateTodoContext\";\r\n  // Import le Todos composant\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n        <Router>\r\n            <Switch>\r\n              <TodoProvider>\r\n                <NavBar />\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-11 col-xm-12 mr-auto ml-auto mt-4 mb-4\">\r\n                    <UpdateContextTodoProvider>\r\n                      <Route exact path=\"/\" component={TodosTable} />\r\n                      <Route exact path=\"/addTodo\" component={AddTodo} />\r\n                      <Route exact path=\"/updateTodo\" component={updateTodo} />\r\n                    </UpdateContextTodoProvider>\r\n                  </div>\r\n                </div>\r\n              </TodoProvider>\r\n            </Switch>\r\n        </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// version précéedente\r\n\r\n\r\n// import { useEffect, useState } from \"react\";\r\n// import { \r\n//     ChakraProvider, \r\n//     //Container, \r\n//     Heading, \r\n//     Center, \r\n//     VStack,\r\n//     Text,\r\n//     HStack,\r\n//     Button,\r\n//     SimpleGrid,\r\n// } from \"@chakra-ui/react\";\r\n\r\n\r\n// version précéedente\r\n\r\n// export default function App() {\r\n//     const [allTodos, setAllTodos] = useState([])\r\n\r\n//     // version test\r\n//     const fetchTodos = async () => {\r\n//         // pour récupérer les tâches du backend de manière asynchrone\r\n//         const response = await fetch(\"http://localhost:5000\")\r\n//         // mettre à jour la todo variable d'état à la fin de la fonction\r\n//         const todos = await response.json()\r\n//         setAllTodos(todos)\r\n//     }\r\n//     useEffect(() => {\r\n//         // récupère les todos à l'aide de la fetchTodos fonction\r\n//         fetchTodos()\r\n//     }, [])\r\n\r\n    // version 3\r\n    /*\r\n    // is going to make the call\r\n    useEffect(() => {\r\n        fetch(\"http://localhost:5000/todos\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                console.log(data);\r\n                setAllTodos([data]);\r\n            });\r\n    }, [])\r\n    */\r\n\r\n    // center : background in black\r\n        // frontcolor of white\r\n    // VStack : vertical stack\r\n    // Button\r\n        // lg = large\r\n\r\n\r\n\r\n//   return (\r\n//     <ChakraProvider>\r\n//         <Center bg=\"black\" color=\"white\" padding={8}>\r\n//             <VStack spacing={7}>\r\n//                 <Heading> Your ToDo List</Heading>\r\n//                 <HStack>\r\n//                     <Text>Take a look at all the things you need to do!</Text>\r\n//                     <Button size=\"lg\" colorScheme=\"red\" isDisabled={null} onClick={null}>\r\n//                         Add ToDo\r\n//                     </Button> \r\n//                 </HStack>\r\n//                 <Heading> What you need to do</Heading>\r\n//                 <SimpleGrid columns={1} spacing={8}>\r\n//                     {\r\n//                         allTodos.map(todo =>{\r\n//                             return (\r\n//                                 <b> {todo.title} {todo.unit}</b>\r\n//                             )\r\n//                         })\r\n//                     }\r\n//                 </SimpleGrid>\r\n//             </VStack>\r\n//         </Center>\r\n//     </ChakraProvider>\r\n//   );\r\n// }"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,aAAa,IAAIC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,MAAM,QAAO,kBAAkB;AAC3E;AACA;AACA;AACA;;AAEF,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,OAAO,MAAM,sBAAsB;AAE1C,SAAQC,YAAY,QAAO,eAAe;AAC1C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,SAASC,0BAA0B,QAAQ,qBAAqB;AAC9D;AAAA;AAEF,SAASC,GAAG,GAAG;EACb,oBACE;IAAA,uBACI,QAAC,MAAM;MAAA,uBACH,QAAC,MAAM;QAAA,uBACL,QAAC,YAAY;UAAA,wBACX,QAAC,MAAM;YAAA;YAAA;YAAA;UAAA,QAAG,eACV;YAAK,SAAS,EAAC,KAAK;YAAA,uBAClB;cAAK,SAAS,EAAC,+CAA+C;cAAA,uBAC5D,QAAC,yBAAyB;gBAAA,wBACxB,QAAC,KAAK;kBAAC,KAAK;kBAAC,IAAI,EAAC,GAAG;kBAAC,SAAS,EAAEL;gBAAW;kBAAA;kBAAA;kBAAA;gBAAA,QAAG,eAC/C,QAAC,KAAK;kBAAC,KAAK;kBAAC,IAAI,EAAC,UAAU;kBAAC,SAAS,EAAEC;gBAAQ;kBAAA;kBAAA;kBAAA;gBAAA,QAAG,eACnD,QAAC,KAAK;kBAAC,KAAK;kBAAC,IAAI,EAAC,aAAa;kBAAC,SAAS,EAAEE;gBAAW;kBAAA;kBAAA;kBAAA;gBAAA,QAAG;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAC/B;cAAA;cAAA;cAAA;YAAA;UACxB;YAAA;YAAA;YAAA;UAAA,QACF;QAAA;UAAA;UAAA;UAAA;QAAA;MACO;QAAA;QAAA;QAAA;MAAA;IACR;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACP;AAEV;AAAC,KArBQE,GAAG;AAuBZ,eAAeA,GAAG;;AAGlB;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACI;AACJ;AACA;AACI;;AAIR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}